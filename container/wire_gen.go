// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package container

import (
	"github.com/google/wire"
	"github.com/jmoiron/sqlx"
	"github.com/reyhanfahlevi/soap-absence/config"
	absence2 "github.com/reyhanfahlevi/soap-absence/resource/absence"
	soap2 "github.com/reyhanfahlevi/soap-absence/resource/soap"
	"github.com/reyhanfahlevi/soap-absence/service/absence"
	"github.com/reyhanfahlevi/soap-absence/service/soap"
	"github.com/tokopedia/affiliate/pkg/httpclient"
	"github.com/tokopedia/affiliate/pkg/log"
)

// Injectors from wire.go:

func InitializeAbsenceService() (*absence.Service, error) {
	db, err := DBProvider()
	if err != nil {
		return nil, err
	}
	resource := absence2.New(db)
	service := absence.New(resource)
	return service, nil
}

func InitializeSoapService(address string) (*soap.Service, error) {
	client := HttpClientProvider()
	resource := soap2.New(client, address)
	service := soap.New(resource)
	return service, nil
}

// wire.go:

var AbsenceResourceProvider = wire.NewSet(absence2.New, wire.Bind(new(absence.Resource), new(absence2.Resource)))

var SoapResourceProvider = wire.NewSet(soap2.New, wire.Bind(new(soap.Resource), new(soap2.Resource)))

// DBProvider db provider
func DBProvider() (*sqlx.DB, error) {
	log.Println("connecting db")
	dsn := config.Get().DB.Master
	db, err := sqlx.Open("mysql", dsn)
	if err != nil {
		return nil, err
	}
	log.Println("connection established")
	return db, nil
}

// HttpClientProvider http client provider
func HttpClientProvider() *httpclient.Client {
	return httpclient.NewClient()
}
